services:
  # PostgreSQL with pgvector extension
  postgres:
    image: pgvector/pgvector:pg15
    container_name: prethrift_postgres_dev
    environment:
      POSTGRES_DB: prethrift
      POSTGRES_USER: prethrift
      POSTGRES_PASSWORD: prethrift_dev
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U prethrift -d prethrift"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - prethrift-dev

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: prethrift_redis_dev
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - prethrift-dev

  # LocalStack for AWS services simulation
  localstack:
    image: localstack/localstack:latest
    container_name: prethrift_localstack_dev
    ports:
      - "4567:4566"
    environment:
      - SERVICES=s3,cloudwatch,logs
      - DEBUG=1
      - DOCKER_HOST=unix:///var/run/docker.sock
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - DATA_DIR=/var/lib/localstack
    volumes:
      - localstack_data:/var/lib/localstack
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - prethrift-dev

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: prethrift_jaeger_dev
    ports:
      - "16687:16686"  # Jaeger UI
      - "14251:14250"  # gRPC
      - "14269:14268"  # HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - prethrift-dev

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prethrift_prometheus_dev
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - prethrift-dev

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: prethrift_grafana_dev
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - prethrift-dev

  # FastAPI Backend Application
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: prethrift_backend_dev
    ports:
      - "8000:8000"
    environment:
      # Database configuration
      - DATABASE_URL=postgresql://prethrift:prethrift_dev@postgres:5432/prethrift
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=prethrift
      - DB_USER=prethrift
      - DB_PASSWORD=prethrift_dev

      # Redis configuration
      - REDIS_URL=redis://redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379

      # AWS/LocalStack configuration
      - AWS_ENDPOINT_URL=http://localstack:4566
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
      - S3_BUCKET=prethrift-dev

      # Observability configuration
      - LOG_LEVEL=DEBUG
      - LOG_FORMAT=json
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - OTEL_SERVICE_NAME=prethrift-api
      - OTEL_RESOURCE_ATTRIBUTES=service.name=prethrift-api,service.version=dev

      # Sentry configuration (optional for dev)
      - SENTRY_DSN=
      - SENTRY_ENVIRONMENT=development

      # Application configuration
      - ENVIRONMENT=development
      - DEBUG=true
      - API_V1_STR=/api/v1
      - PROJECT_NAME=PreThrift API

      # AI/ML configuration
      - EMBEDDING_MODEL=sentence-transformers/all-MiniLM-L6-v2
      - CACHE_TTL=3600

    volumes:
      - ./app:/app/app:ro
      - ./requirements.txt:/app/requirements.txt:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      localstack:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - prethrift-dev

volumes:
  postgres_data:
  redis_data:
  localstack_data:
  prometheus_data:
  grafana_data:

networks:
  prethrift-dev:
    driver: bridge
